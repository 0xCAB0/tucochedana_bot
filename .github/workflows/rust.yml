name: Test and Build Rust

on:
  pull_request:
    paths:
      - 'src/*'         
      - 'Cargo.toml'     
      - 'Cargo.lock'
  push:
    branches:
      - main
    paths:
      - 'src/*'
      - '.github/*'    
      - 'Cargo.toml'     
      - 'Cargo.lock'     
  workflow_dispatch:
  schedule:
    # Check if it works with current dependencies (weekly on Wednesday 2:32 UTC)
    - cron: "32 2 * * 3"

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
        # Set health checks to wait until postgres has started

        ports:
          - 5432:5432

        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          components: clippy
          override: true
          profile: minimal
          toolchain: stable

      - name: Run clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: --verbose --all-targets --all-features -- -D warnings

      - name: Install diesel-cli
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: diesel_cli --no-default-features --features "postgres"

      - name: Setup db
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost/tu-coche-dana-bot"
        run: diesel setup

      - name: Run tests
        env:
          DATABASE_URL: "postgres://postgres:postgres@localhost/tu-coche-dana-bot"
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose --all-features

  release:
    name: Release x86_64-unknown-linux-gnu
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          target: x86_64-unknown-linux-gnu
          toolchain: stable

      - name: Build release
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --verbose --all-features --target x86_64-unknown-linux-gnu

  build-container:
    name: Build and Push image to DockerHub.
    runs-on: ubuntu-latest
    needs: test
    #if: github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev perl

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: thal0s/tu-coche-dana:latest

  deploy:
    name: SSH to Server and Pull Changes
    runs-on: ubuntu-latest
    needs: build-container
    if: github.ref == 'refs/heads/master'
    continue-on-error: true
    steps:
      - name: Run script
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            docker compose -f $HOME/deploy/docker-compose.yml down

            docker compose -f $HOME/deploy/docker-compose.yml pull

            docker compose -f $HOME/deploy/docker-compose.yml up -d
